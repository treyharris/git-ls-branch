#!/usr/bin/python
"""Show git branches with the most-recently-modified date.

"""
import argparse
from collections import Sequence
import os
import sys
import subprocess

PARSER = argparse.ArgumentParser(description="Process some integers.")
PARSER.add_argument("-r", "--remotes", action="store_true",
                    help="List the remote-tracking branches.")
PARSER.add_argument("-a", "--all", action="store_true",
                    help="List both remote-tracking and local branches.")
PARSER.add_argument("--no-color", "--nocolor", action="store_const",
                    const="never", dest="color",
                    help="Turn off branch colors, even when the "
                    "configuration file gives the default to color output. "
                    "Same as --color=never.")
PARSER.add_argument("--color", choices=["never", "auto", "always"],
                    metavar="{always, auto, never}",
                    help="Color output. The value must be always, never, "
                    "or auto.")
ARGS = argparse.Namespace()

CURRENT_BRANCH = None

class GitCallError(Exception):
  pass

def CommandLines(cmd_args, mapping=None):
  stdin = stdout = stderr = subprocess.PIPE
  process = subprocess.Popen(cmd_args, bufsize=1, stdin=stdin,
                             stdout=stdout, stderr=stderr,
                             shell=False,
                             universal_newlines=True)
  for line in iter(process.stdout.readline, ""):
    out = line.rstrip("\n")
    if mapping:
      out = mapping(out)
    yield out
  (output, errors) = process.communicate()
  exit_code = process.returncode
  if errors:
    raise GitCallError("ERROR running %s:\n%s" % (cmd_args,
                                                  output + errors))
  if exit_code:
    raise GitCallError("Got return code %d from %s" % (exit_code,
                                                       cmd_args))


def GitLogLines(branches):
  if not isinstance(branches, Sequence):
    branches = [branches]

  if ARGS.color == "never":
    output_format = "%ci %cr"
  else:
    output_format = "%Cgreen%ci %Cblue%cr%Creset"
  git_command = ["git", "log", "-1",
                 "--pretty=format:%s" % output_format]

  for b in branches:
    date = CommandLines(git_command + [b, "--"]).next()
    current_marker = " "
    if b == CURRENT_BRANCH:
      current_marker = "*"
    yield "%-65s %s %s" % (date, current_marker, b)

def GitBranches():
  """Run git branch.

  Returns:
    List of branches.
  """
  git_command = ["git", "branch", "--color=never"]
  if ARGS.remotes:
    git_command.append("-r")
  if ARGS.all:
    git_command.append("-a")

  def extractBranch(line):
    current = False
    if line[0] == "*": # current branch, save it
      current = True
    # remove spaces or '* '
    line = line[2:]
    # remove potential remote refs
    idx = line.find(" ->")
    if idx != -1:
      line = line[:idx]
    if current:
      global CURRENT_BRANCH
      CURRENT_BRANCH = line
    return line

  branches = list(CommandLines(git_command, extractBranch))
  return branches


if __name__ == "__main__":
  ARGS = PARSER.parse_args()
  try:
    branches = GitBranches()
    lines = list(GitLogLines(branches))
    print "\n".join(sorted(lines, reverse=True))
  except GitCallError as e:
    print "Failed: %s" % str(e).rstrip("\n")
    sys.exit(1)
