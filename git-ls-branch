#!/usr/bin/python
"""Show git branches with the most-recently-modified date.

"""
import argparse
from collections import Sequence
import os
import sys
import subprocess

class GitCallError(Exception):
  pass

def CommandLines(cmd_args, mapping=None):
  stdin = stdout = stderr = subprocess.PIPE
  process = subprocess.Popen(cmd_args, bufsize=1, stdin=stdin,
                             stdout=stdout, stderr=stderr,
                             shell=False,
                             universal_newlines=True)
  for line in iter(process.stdout.readline, ""):
    out = line.rstrip("\n")
    if mapping:
      out = mapping(out)
    yield out
  (output, errors) = process.communicate()
  exit_code = process.returncode
  if errors:
    raise GitCallError("ERROR running %s:\n%s" % (cmd_args,
                                                  output + errors))
  if exit_code:
    raise GitCallError("Got return code %d from %s" % (exit_code,
                                                       cmd_args))


def GitLogLines(branches):
  if not isinstance(branches, Sequence):
    branches = [branches]

  git_command = ["git", "log", "-1",
                 "--pretty=format:%Cgreen%ci %Cblue%cr%Creset"]

  for b in branches:
    date = CommandLines(git_command + [b]).next()
    yield "%-65s %s" % (date, b)

def GitBranches():
  """Run git branch.

  Returns:
    List of branches.
  """
  git_command = ["git", "branch", "--color=never"]
  branches = list(CommandLines(git_command, lambda s: s[2:]))
  return branches


if __name__ == "__main__":
  try:
    branches = GitBranches()
    lines = list(GitLogLines(branches))
    print "\n".join(sorted(lines, reverse=True))
  except GitCallError as e:
    print "Failed: %s" % str(e).rstrip("\n")
    sys.exit(1)
